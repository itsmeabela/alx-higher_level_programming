Test cases for '0-add_integer.py'
=================================

Adds two integers, with the function 'add_integer'
--------------------------------------------------

Import 'add_integer'
>>> add_integer = __import__('0-add_integer').add_integer

Cases to be evaluated:

Case #1: test with zero arguments
>>> add_integer()
Traceback (most recent call last):
...
TypeError: add_integer() missing 1 required positional argument: 'a'

Case #2: test Null variable to 'a'
>>> add_integer(None, 1)
Traceback (most recent call last):
...
TypeError: a must be an integer

Case #3: test Null variable to 'b'
>>> add_integer(1, None)
Traceback (most recent call last):
...
TypeError: b must be an integer

Case #4: test Null for both variables
>>> add_integer(None, None)
Traceback (most recent call last):
...
TypeError: a must be an integer

Case #5: test passing more than 2 argument
>>> add_integer(1, 1, 1)
Traceback (most recent call last):
...
TypeError: add_integer() takes from 1 to 2 positional arguments but 3 were given

Case #6: test 'a' such as string (int(b)).
>>> add_integer("Holberton", 98)
Traceback (most recent call last):
...
TypeError: a must be an integer

Case #7: test 'b' such as string (int(a)).
>>> add_integer(98, "Holberton")
Traceback (most recent call last):
...
TypeError: b must be an integer

Case #8: test 'a' and 'b' such as string.
>>> add_integer("98", "Holberton")
Traceback (most recent call last):
...
TypeError: a must be an integer

Case #9: test adds two arguments(int).
>>> add_integer(2, -2)
0

Case #10: test adding 1 argument(int).
>>> add_integer(2)
100

Case #11: test adding between floats.
>>> add_integer(20.5, 0.5)
20

Case #12: test adding complex number to 'a', the same response apply to 'b'.
>>> add_integer(7+7j, 7)
Traceback (most recent call last):
...
TypeError: a must be an integer

Case #13: test adding an infinity number as an argument.
>>> add_integer(float('inf'), 1)
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer
